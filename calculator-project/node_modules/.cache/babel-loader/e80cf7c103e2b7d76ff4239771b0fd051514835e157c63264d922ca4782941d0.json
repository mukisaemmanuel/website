{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { performCalculation, formatNumber, calculatePercentage, toggleSign, isValidInput } from \"../utils/calculator.utils\";\nconst initialState = {\n  display: \"0\",\n  previousValue: null,\n  currentValue: null,\n  operation: null,\n  isNewEntry: true,\n  hasDecimal: false\n};\nexport const useCalculator = () => {\n  _s();\n  const [state, setState] = useState(initialState);\n  const handleNumberClick = useCallback(num => {\n    setState(prevState => {\n      if (num === \".\" && prevState.hasDecimal) {\n        return prevState;\n      }\n      if (!isValidInput(prevState.display, num)) {\n        return prevState;\n      }\n      let newDisplay;\n      let newHasDecimal = prevState.hasDecimal;\n      if (prevState.isNewEntry) {\n        newDisplay = num === \".\" ? \"0.\" : num;\n        newHasDecimal = num === \".\";\n      } else {\n        if (prevState.display === \"0\" && num !== \".\") {\n          newDisplay = num;\n        } else {\n          newDisplay = prevState.display + num;\n        }\n        if (num === \".\") {\n          newHasDecimal = true;\n        }\n      }\n      return {\n        ...prevState,\n        display: newDisplay,\n        currentValue: parseFloat(newDisplay),\n        isNewEntry: false,\n        hasDecimal: newHasDecimal\n      };\n    });\n  }, []);\n  const handleOperatorClick = useCallback(operation => {\n    setState(prevState => {\n      if (operation === \"=\") {\n        return prevState;\n      }\n      let newPreviousValue = prevState.currentValue || 0;\n      let newDisplay = prevState.display;\n\n      // If there's a previous operation, perform it first\n      if (prevState.operation && prevState.previousValue !== null && prevState.currentValue !== null && !prevState.isNewEntry) {\n        try {\n          const result = performCalculation(prevState.previousValue, prevState.currentValue, prevState.operation);\n          newPreviousValue = result;\n          newDisplay = formatNumber(result);\n        } catch (error) {\n          newDisplay = \"Error\";\n          newPreviousValue = 0;\n        }\n      }\n      return {\n        ...prevState,\n        display: newDisplay,\n        previousValue: newPreviousValue,\n        currentValue: null,\n        operation,\n        isNewEntry: true,\n        hasDecimal: false\n      };\n    });\n  }, []);\n  const handleEqualsClick = useCallback(() => {\n    setState(prevState => {\n      if (!prevState.operation || prevState.previousValue === null || prevState.currentValue === null) {\n        return prevState;\n      }\n      try {\n        const result = performCalculation(prevState.previousValue, prevState.currentValue, prevState.operation);\n        return {\n          ...prevState,\n          display: formatNumber(result),\n          previousValue: null,\n          currentValue: result,\n          operation: null,\n          isNewEntry: true,\n          hasDecimal: result.toString().includes(\".\")\n        };\n      } catch (error) {\n        return {\n          ...initialState,\n          display: \"Error\"\n        };\n      }\n    });\n  }, []);\n  const handleUtilityClick = useCallback(utility => {\n    setState(prevState => {\n      switch (utility) {\n        case \"C\":\n          return initialState;\n        case \"+/-\":\n          if (prevState.currentValue === null || prevState.currentValue === 0) {\n            return prevState;\n          }\n          const toggledValue = toggleSign(prevState.currentValue);\n          return {\n            ...prevState,\n            display: formatNumber(toggledValue),\n            currentValue: toggledValue\n          };\n        case \"%\":\n          if (prevState.currentValue === null) {\n            return prevState;\n          }\n          const percentageValue = calculatePercentage(prevState.currentValue);\n          return {\n            ...prevState,\n            display: formatNumber(percentageValue),\n            currentValue: percentageValue\n          };\n        default:\n          return prevState;\n      }\n    });\n  }, []);\n  const handleClearClick = useCallback(() => {\n    setState(initialState);\n  }, []);\n  return {\n    state,\n    handleNumberClick,\n    handleOperatorClick,\n    handleUtilityClick,\n    handleEqualsClick,\n    handleClearClick\n  };\n};\n_s(useCalculator, \"rhW8497HRJ9DniN7tC2lwFdh7PU=\");","map":{"version":3,"names":["useState","useCallback","performCalculation","formatNumber","calculatePercentage","toggleSign","isValidInput","initialState","display","previousValue","currentValue","operation","isNewEntry","hasDecimal","useCalculator","_s","state","setState","handleNumberClick","num","prevState","newDisplay","newHasDecimal","parseFloat","handleOperatorClick","newPreviousValue","result","error","handleEqualsClick","toString","includes","handleUtilityClick","utility","toggledValue","percentageValue","handleClearClick"],"sources":["/home/mukisa/Desktop/website/tailwind/src/hooks/useCalculator.tsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { CalculatorState, OperationType } from \"../types/calculator.types\";\nimport {\n  performCalculation,\n  formatNumber,\n  calculatePercentage,\n  toggleSign,\n  isValidInput,\n} from \"../utils/calculator.utils\";\n\nconst initialState: CalculatorState = {\n  display: \"0\",\n  previousValue: null,\n  currentValue: null,\n  operation: null,\n  isNewEntry: true,\n  hasDecimal: false,\n};\n\nexport const useCalculator = () => {\n  const [state, setState] = useState<CalculatorState>(initialState);\n\n  const handleNumberClick = useCallback((num: string) => {\n    setState((prevState) => {\n      if (num === \".\" && prevState.hasDecimal) {\n        return prevState;\n      }\n\n      if (!isValidInput(prevState.display, num)) {\n        return prevState;\n      }\n\n      let newDisplay: string;\n      let newHasDecimal = prevState.hasDecimal;\n\n      if (prevState.isNewEntry) {\n        newDisplay = num === \".\" ? \"0.\" : num;\n        newHasDecimal = num === \".\";\n      } else {\n        if (prevState.display === \"0\" && num !== \".\") {\n          newDisplay = num;\n        } else {\n          newDisplay = prevState.display + num;\n        }\n        if (num === \".\") {\n          newHasDecimal = true;\n        }\n      }\n\n      return {\n        ...prevState,\n        display: newDisplay,\n        currentValue: parseFloat(newDisplay),\n        isNewEntry: false,\n        hasDecimal: newHasDecimal,\n      };\n    });\n  }, []);\n\n  const handleOperatorClick = useCallback((operation: OperationType) => {\n    setState((prevState) => {\n      if (operation === \"=\") {\n        return prevState;\n      }\n\n      let newPreviousValue = prevState.currentValue || 0;\n      let newDisplay = prevState.display;\n\n      // If there's a previous operation, perform it first\n      if (\n        prevState.operation &&\n        prevState.previousValue !== null &&\n        prevState.currentValue !== null &&\n        !prevState.isNewEntry\n      ) {\n        try {\n          const result = performCalculation(\n            prevState.previousValue,\n            prevState.currentValue,\n            prevState.operation\n          );\n          newPreviousValue = result;\n          newDisplay = formatNumber(result);\n        } catch (error) {\n          newDisplay = \"Error\";\n          newPreviousValue = 0;\n        }\n      }\n\n      return {\n        ...prevState,\n        display: newDisplay,\n        previousValue: newPreviousValue,\n        currentValue: null,\n        operation,\n        isNewEntry: true,\n        hasDecimal: false,\n      };\n    });\n  }, []);\n\n  const handleEqualsClick = useCallback(() => {\n    setState((prevState) => {\n      if (\n        !prevState.operation ||\n        prevState.previousValue === null ||\n        prevState.currentValue === null\n      ) {\n        return prevState;\n      }\n\n      try {\n        const result = performCalculation(\n          prevState.previousValue,\n          prevState.currentValue,\n          prevState.operation\n        );\n\n        return {\n          ...prevState,\n          display: formatNumber(result),\n          previousValue: null,\n          currentValue: result,\n          operation: null,\n          isNewEntry: true,\n          hasDecimal: result.toString().includes(\".\"),\n        };\n      } catch (error) {\n        return {\n          ...initialState,\n          display: \"Error\",\n        };\n      }\n    });\n  }, []);\n\n  const handleUtilityClick = useCallback((utility: string) => {\n    setState((prevState) => {\n      switch (utility) {\n        case \"C\":\n          return initialState;\n\n        case \"+/-\":\n          if (prevState.currentValue === null || prevState.currentValue === 0) {\n            return prevState;\n          }\n          const toggledValue = toggleSign(prevState.currentValue);\n          return {\n            ...prevState,\n            display: formatNumber(toggledValue),\n            currentValue: toggledValue,\n          };\n\n        case \"%\":\n          if (prevState.currentValue === null) {\n            return prevState;\n          }\n          const percentageValue = calculatePercentage(prevState.currentValue);\n          return {\n            ...prevState,\n            display: formatNumber(percentageValue),\n            currentValue: percentageValue,\n          };\n\n        default:\n          return prevState;\n      }\n    });\n  }, []);\n\n  const handleClearClick = useCallback(() => {\n    setState(initialState);\n  }, []);\n\n  return {\n    state,\n    handleNumberClick,\n    handleOperatorClick,\n    handleUtilityClick,\n    handleEqualsClick,\n    handleClearClick,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}