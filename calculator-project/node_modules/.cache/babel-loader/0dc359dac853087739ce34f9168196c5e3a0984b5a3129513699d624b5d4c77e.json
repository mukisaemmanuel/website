{"ast":null,"code":"export const performCalculation = (previousValue, currentValue, operation) => {\n  switch (operation) {\n    case \"+\":\n      return previousValue + currentValue;\n    case \"-\":\n      return previousValue - currentValue;\n    case \"×\":\n      return previousValue * currentValue;\n    case \"÷\":\n      if (currentValue === 0) {\n        throw new Error(\"Cannot divide by zero\");\n      }\n      return previousValue / currentValue;\n    default:\n      return currentValue;\n  }\n};\nexport const formatNumber = num => {\n  // Handle very large numbers with scientific notation\n  if (Math.abs(num) >= 1e15) {\n    return num.toExponential(2);\n  }\n\n  // Handle very small numbers\n  if (Math.abs(num) < 1e-10 && num !== 0) {\n    return num.toExponential(2);\n  }\n\n  // Format normal numbers with appropriate decimal places\n  const str = num.toString();\n\n  // If the number has more than 10 digits, use scientific notation\n  if (str.replace(\".\", \"\").replace(\"-\", \"\").length > 10) {\n    return num.toExponential(2);\n  }\n\n  // Remove trailing zeros for decimal numbers\n  if (str.includes(\".\")) {\n    return parseFloat(str).toString();\n  }\n  return str;\n};\nexport const addCommas = str => {\n  // Split the string into integer and decimal parts\n  const parts = str.split(\".\");\n  const integerPart = parts[0];\n  const decimalPart = parts[1];\n\n  // Add commas to the integer part\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  // Combine with decimal part if it exists\n  return decimalPart ? `${formattedInteger}.${decimalPart}` : formattedInteger;\n};\nexport const calculatePercentage = value => {\n  return value / 100;\n};\nexport const toggleSign = value => {\n  return value * -1;\n};\nexport const isValidInput = (currentDisplay, newDigit) => {\n  // Don't allow multiple decimal points\n  if (newDigit === \".\" && currentDisplay.includes(\".\")) {\n    return false;\n  }\n\n  // Don't allow leading zeros except for decimal numbers\n  if (newDigit === \"0\" && currentDisplay === \"0\") {\n    return false;\n  }\n\n  // Limit display length to prevent overflow\n  if (currentDisplay.length >= 10 && newDigit !== \".\") {\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["performCalculation","previousValue","currentValue","operation","Error","formatNumber","num","Math","abs","toExponential","str","toString","replace","length","includes","parseFloat","addCommas","parts","split","integerPart","decimalPart","formattedInteger","calculatePercentage","value","toggleSign","isValidInput","currentDisplay","newDigit"],"sources":["/home/mukisa/Desktop/website/tailwind/src/utils/calculator.utils.ts"],"sourcesContent":["import { OperationType } from \"../types/calculator.types\";\n\nexport const performCalculation = (\n  previousValue: number,\n  currentValue: number,\n  operation: OperationType\n): number => {\n  switch (operation) {\n    case \"+\":\n      return previousValue + currentValue;\n    case \"-\":\n      return previousValue - currentValue;\n    case \"×\":\n      return previousValue * currentValue;\n    case \"÷\":\n      if (currentValue === 0) {\n        throw new Error(\"Cannot divide by zero\");\n      }\n      return previousValue / currentValue;\n    default:\n      return currentValue;\n  }\n};\n\nexport const formatNumber = (num: number): string => {\n  // Handle very large numbers with scientific notation\n  if (Math.abs(num) >= 1e15) {\n    return num.toExponential(2);\n  }\n\n  // Handle very small numbers\n  if (Math.abs(num) < 1e-10 && num !== 0) {\n    return num.toExponential(2);\n  }\n\n  // Format normal numbers with appropriate decimal places\n  const str = num.toString();\n\n  // If the number has more than 10 digits, use scientific notation\n  if (str.replace(\".\", \"\").replace(\"-\", \"\").length > 10) {\n    return num.toExponential(2);\n  }\n\n  // Remove trailing zeros for decimal numbers\n  if (str.includes(\".\")) {\n    return parseFloat(str).toString();\n  }\n\n  return str;\n};\n\nexport const addCommas = (str: string): string => {\n  // Split the string into integer and decimal parts\n  const parts = str.split(\".\");\n  const integerPart = parts[0];\n  const decimalPart = parts[1];\n\n  // Add commas to the integer part\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n  // Combine with decimal part if it exists\n  return decimalPart ? `${formattedInteger}.${decimalPart}` : formattedInteger;\n};\n\nexport const calculatePercentage = (value: number): number => {\n  return value / 100;\n};\n\nexport const toggleSign = (value: number): number => {\n  return value * -1;\n};\n\nexport const isValidInput = (\n  currentDisplay: string,\n  newDigit: string\n): boolean => {\n  // Don't allow multiple decimal points\n  if (newDigit === \".\" && currentDisplay.includes(\".\")) {\n    return false;\n  }\n\n  // Don't allow leading zeros except for decimal numbers\n  if (newDigit === \"0\" && currentDisplay === \"0\") {\n    return false;\n  }\n\n  // Limit display length to prevent overflow\n  if (currentDisplay.length >= 10 && newDigit !== \".\") {\n    return false;\n  }\n\n  return true;\n};\n"],"mappings":"AAEA,OAAO,MAAMA,kBAAkB,GAAGA,CAChCC,aAAqB,EACrBC,YAAoB,EACpBC,SAAwB,KACb;EACX,QAAQA,SAAS;IACf,KAAK,GAAG;MACN,OAAOF,aAAa,GAAGC,YAAY;IACrC,KAAK,GAAG;MACN,OAAOD,aAAa,GAAGC,YAAY;IACrC,KAAK,GAAG;MACN,OAAOD,aAAa,GAAGC,YAAY;IACrC,KAAK,GAAG;MACN,IAAIA,YAAY,KAAK,CAAC,EAAE;QACtB,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAOH,aAAa,GAAGC,YAAY;IACrC;MACE,OAAOA,YAAY;EACvB;AACF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAIC,GAAW,IAAa;EACnD;EACA,IAAIC,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,IAAI,IAAI,EAAE;IACzB,OAAOA,GAAG,CAACG,aAAa,CAAC,CAAC,CAAC;EAC7B;;EAEA;EACA,IAAIF,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,GAAG,KAAK,IAAIA,GAAG,KAAK,CAAC,EAAE;IACtC,OAAOA,GAAG,CAACG,aAAa,CAAC,CAAC,CAAC;EAC7B;;EAEA;EACA,MAAMC,GAAG,GAAGJ,GAAG,CAACK,QAAQ,CAAC,CAAC;;EAE1B;EACA,IAAID,GAAG,CAACE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACC,MAAM,GAAG,EAAE,EAAE;IACrD,OAAOP,GAAG,CAACG,aAAa,CAAC,CAAC,CAAC;EAC7B;;EAEA;EACA,IAAIC,GAAG,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACrB,OAAOC,UAAU,CAACL,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC;EACnC;EAEA,OAAOD,GAAG;AACZ,CAAC;AAED,OAAO,MAAMM,SAAS,GAAIN,GAAW,IAAa;EAChD;EACA,MAAMO,KAAK,GAAGP,GAAG,CAACQ,KAAK,CAAC,GAAG,CAAC;EAC5B,MAAMC,WAAW,GAAGF,KAAK,CAAC,CAAC,CAAC;EAC5B,MAAMG,WAAW,GAAGH,KAAK,CAAC,CAAC,CAAC;;EAE5B;EACA,MAAMI,gBAAgB,GAAGF,WAAW,CAACP,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;;EAE1E;EACA,OAAOQ,WAAW,GAAG,GAAGC,gBAAgB,IAAID,WAAW,EAAE,GAAGC,gBAAgB;AAC9E,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIC,KAAa,IAAa;EAC5D,OAAOA,KAAK,GAAG,GAAG;AACpB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAID,KAAa,IAAa;EACnD,OAAOA,KAAK,GAAG,CAAC,CAAC;AACnB,CAAC;AAED,OAAO,MAAME,YAAY,GAAGA,CAC1BC,cAAsB,EACtBC,QAAgB,KACJ;EACZ;EACA,IAAIA,QAAQ,KAAK,GAAG,IAAID,cAAc,CAACZ,QAAQ,CAAC,GAAG,CAAC,EAAE;IACpD,OAAO,KAAK;EACd;;EAEA;EACA,IAAIa,QAAQ,KAAK,GAAG,IAAID,cAAc,KAAK,GAAG,EAAE;IAC9C,OAAO,KAAK;EACd;;EAEA;EACA,IAAIA,cAAc,CAACb,MAAM,IAAI,EAAE,IAAIc,QAAQ,KAAK,GAAG,EAAE;IACnD,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}